# -*- coding: utf-8 -*-
"""MLHW4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IwrO0AWO6py2abogvKPPzUmJpX9YXKRf
"""

# Code to read csv file into Colaboratory:
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from keras.models import load_model
import vis, keras


# Authenticate and create the PyDrive client.  #用來驗證
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

#這邊的link是檔案共用連結
link1 = 'https://drive.google.com/open?id=1ERNFRRXeOq2vUWOhCahOBTX-7olfFKKg'  
link2 = 'https://drive.google.com/open?id=11Kdj8E0rrJc14o2HWZPG-Cjf243c75nF'
# Verify that you have everything after '='
fluff, id1 = link1.split('=') 
fluff, id2 = link2.split('=')

#這邊要放檔案名稱
downloaded1 = drive.CreateFile({'id':id1}) 
downloaded2 = drive.CreateFile({'id':id2}) 

downloaded1.GetContentFile('train') 
downloaded2.GetContentFile('model.h5') 

data = pd.read_csv('train')
model = load_model('model.h5')

from keras.utils import np_utils
def read_data(df):
    
    X = df.drop('label', axis = 1)
    temp = []
    for i in range(X.shape[0]):
        temp.append(np.array(X.iloc[i,0].split(" "), dtype = 'float').reshape(48, 48, 1))
    X = np.array(temp) / 255

    Y = df['label']
    Y = np_utils.to_categorical(Y, 7)
    return X, Y

X, Y = read_data(data)

#前置作業
#從各種表情挑出各一張
img_list = []
index = 0
for i in range(X.shape[0]):
  if Y[i].argmax() == index:
    img_list.append(X[i])
    index += 1
    if index == 7:
      break
img_list = np.array(img_list)

#predict from model
predict_data = model.predict(img_list)

"""Saliency Model"""

import keras.backend as K
import copy

def calculate_grad(index): #計算Gradient
  class_idx = predict_data[index].argmax()
  
  layer_input       = model.input
  loss              = model.layers[-1].output[...,class_idx]
  grad_tensor       = K.gradients(loss,layer_input)[0]
  derivative_fn     = K.function([layer_input],[grad_tensor])
  grad_eval = derivative_fn([img_list[index][np.newaxis,...]])[0]
  
  grad_eval = np.abs(grad_eval).max(axis=(0,3))
  
  ## normalize to range between 0 and 1
  arr_min, arr_max  = np.min(grad_eval), np.max(grad_eval)
  grad_eval = (grad_eval - arr_min) / (arr_max - arr_min + K.epsilon())
  return grad_eval


def plot_Saliency_map(grads, index): #純粹熱度圖
  classlabel = ["Angry","Disgust","Fear","Happy","Sad","Surprise","Neutral"]
  class_idx = predict_data[index].argmax()
  fig, axes = plt.subplots(1,2,figsize=(14,5))
  axes[0].imshow(img_list[index].reshape((48, 48)), cmap = 'gray')
  i = axes[1].imshow(grads,cmap="jet",alpha=0.8)
  fig.colorbar(i)
  plt.suptitle("Pr(class={}) = {:5.2f}".format(classlabel[class_idx],predict_data[0,class_idx]))
  

def plot_Saliency_mask_map(grads, index): #純粹熱度圖
  classlabel = ["Angry","Disgust","Fear","Happy","Sad","Surprise","Neutral"]
  class_idx = predict_data[index].argmax()
  
  img = copy.deepcopy(img_list[index].reshape((48,48)))
  img[np.where(grad <= 0.1)] = np.mean(img)  #0.1是控制值, 只要小於0.1就mask
  
  fig, axes = plt.subplots(1,2,figsize=(14,5))
  axes[0].imshow(img_list[index].reshape((48,48)), cmap = 'gray')
  axes[1].imshow(img, cmap = 'gray')
  #i = axes[1].imshow(grads,cmap="jet",alpha=0.8)
  #fig.colorbar(i)
  plt.suptitle("Pr(class={}) = {:5.2f}".format(classlabel[class_idx],predict_data[0,class_idx]))

idx = 5
grad = calculate_grad(idx)
plot_Saliency_map(grad, idx)
plot_Saliency_mask_map(grad, idx)

"""Lime"""

!pip install lime

from lime import lime_image
from skimage.segmentation import mark_boundaries
import skimage

def predict(X):
  X = skimage.color.rgb2gray(X) #先轉回來變(48, 48)
  X = X.reshape((-1,48,48,1))
  return model.predict(X)

def segmentation(X):
  return skimage.segmentation.slic(X, n_segments=100, compactness=10)

def lime_plot(index):
  explainer = lime_image.LimeImageExplainer()
  img = img_list[index].reshape((48,48))
  img = skimage.color.gray2rgb(img)  #此時轉換成(48, 48, 3)
  explanation = explainer.explain_instance(img, 
                                           classifier_fn=predict,
                                           segmentation_fn=segmentation,
                                           top_labels = 3, 
                                           hide_color=0, 
                                           num_samples=1000)
  temp, mask = explanation.get_image_and_mask(explanation.top_labels[0], 
                                              positive_only=False, 
                                              num_features=5, 
                                              hide_rest=False)
  
  fig, axes = plt.subplots(1,2,figsize=(14,5))
  axes[0].imshow(img_list[index].reshape((48,48)), cmap = 'gray')
  axes[1].imshow(mark_boundaries(temp, mask))
  plt.title('Lime')

idx = 0
lime_plot(idx)